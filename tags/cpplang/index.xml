<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Cpplang on Kotet's Personal Blog</title><link>https://blog.kotet.jp/tags/cpplang/</link><description>Recent content in Cpplang on Kotet's Personal Blog</description><generator>Hugo -- gohugo.io</generator><language>ja</language><atom:link href="https://blog.kotet.jp/tags/cpplang/index.xml" rel="self" type="application/rss+xml"/><item><title>DとCのインターフェース：配列 Part 2【翻訳】</title><link>https://blog.kotet.jp/2020/12/interfacing-d-with-c-arrays-part-2/</link><pubDate>Mon, 28 Dec 2020 00:00:00 +0000</pubDate><guid>https://blog.kotet.jp/2020/12/interfacing-d-with-c-arrays-part-2/</guid><description>Interfacing D with C: Arrays and Functions (Arrays Part 2) – The D Blog を 許可を得て 翻訳しました。 これは D言語 Advent Calendar 2020 の4日目の記事です。 この投稿はDとCを同じプロジェクトで動かすシリー</description></item><item><title>環境変数が設定されると再コンパイルするmakefile</title><link>https://blog.kotet.jp/2019/09/makefile-depends-on-environment-variables/</link><pubDate>Tue, 24 Sep 2019 00:00:00 +0000</pubDate><guid>https://blog.kotet.jp/2019/09/makefile-depends-on-environment-variables/</guid><description>最近は主にRoboDragonsにフォーマッタを導入したりコンパイル時チェックを増やしたりしています。 RoboDragons は何年も日本1位を維持しているのに他</description></item><item><title>clangのデバッグ情報に行番号をのせる</title><link>https://blog.kotet.jp/2019/08/llvm-symbolizer/</link><pubDate>Thu, 22 Aug 2019 00:00:00 +0000</pubDate><guid>https://blog.kotet.jp/2019/08/llvm-symbolizer/</guid><description>clangでAddressSanitizerとか使うと-gオプションなどをつけても行番号や関数名などの情報が出てこなくて困っていた。 ================================================================= ==32466==ERROR: LeakSanitizer: detected</description></item><item><title>"Mimalloc: Free List Sharding in Action"を読んだ</title><link>https://blog.kotet.jp/2019/06/mimalloc/</link><pubDate>Wed, 26 Jun 2019 00:00:00 +0000</pubDate><guid>https://blog.kotet.jp/2019/06/mimalloc/</guid><description>6月20日、mimallocというメモリアロケータが公開されました。 mimallocは関数型言語の処理系のような、小さな確保と解放を繰り返す</description></item><item><title>gccにおけるモジュラ逆数を用いた(x % m == 0)の最適化</title><link>https://blog.kotet.jp/2019/05/gcc-optimization/</link><pubDate>Mon, 06 May 2019 00:00:00 +0000</pubDate><guid>https://blog.kotet.jp/2019/05/gcc-optimization/</guid><description>gccの最適化 GCC is now transforming: ((x % CONSTANT) == 0) to mod inverse and using rotate when it&amp;#39;s even. Not in clang yet thoughhttps://t.co/nfywTIrTe0 &amp;mdash; Marc B. Reynolds (@marc_b_reynolds) May 5, 2019 ある数が定数で割り切れるかを%を使って判定するコードが #include &amp;#34;stdint.h&amp;#34; uint32_t is_div_7(uint32_t k)</description></item><item><title>DとCのインターフェース：配列 Part 1【翻訳】</title><link>https://blog.kotet.jp/2018/12/interfacing-d-with-c-arrays-part-1/</link><pubDate>Sat, 15 Dec 2018 00:00:00 +0000</pubDate><guid>https://blog.kotet.jp/2018/12/interfacing-d-with-c-arrays-part-1/</guid><description>これは Interfacing D with C: Arrays Part 1 – The D Blog を 許可を得て 翻訳した D言語 Advent Calendar 2018 - Qiita 15日目の記事です。 誤訳等あれば気軽に Pull requestを投げてください。 この</description></item><item><title>dppでCのヘッダファイルを自動変換</title><link>https://blog.kotet.jp/2018/08/dpp/</link><pubDate>Wed, 08 Aug 2018 00:00:00 +0000</pubDate><guid>https://blog.kotet.jp/2018/08/dpp/</guid><description>dpp というパッケージが登場し、使った人の好意的な声をよく聞くようになった。 自分はいまのところ C と連携するようなプログラムを書く予定はないが、 興</description></item><item><title>DとCのインターフェース:入門編【翻訳】</title><link>https://blog.kotet.jp/2017/12/interfacing-d-with-c-getting-started/</link><pubDate>Sun, 10 Dec 2017 00:00:00 +0000</pubDate><guid>https://blog.kotet.jp/2017/12/interfacing-d-with-c-getting-started/</guid><description>この記事はD言語 Advent Calendar 2017 10日目の記事であり、 Interfacing D with C: Getting Started – The D Blog を自分用に翻訳したものを 許可を得て 公開するものである。 ソース中にコメントの形</description></item><item><title>dubで自力でCの構造体を使う</title><link>https://blog.kotet.jp/2017/05/use-c-struct-in-d/</link><pubDate>Thu, 04 May 2017 00:00:00 +0000</pubDate><guid>https://blog.kotet.jp/2017/05/use-c-struct-in-d/</guid><description>前回の続き。 前回と同じようにOpenSSLを使ってstd.digest.shaを使わずにSHA256を計算する。 今回は前回と違い、データは逐</description></item><item><title>dubで自力でOpenSSLを呼び出す</title><link>https://blog.kotet.jp/2017/05/use-c-sha256-in-d/</link><pubDate>Wed, 03 May 2017 00:00:00 +0000</pubDate><guid>https://blog.kotet.jp/2017/05/use-c-sha256-in-d/</guid><description>前回の続き。 明示的にリンクする必要のあるライブラリであるOpenSSLを使ってstd.digest.shaを使わずにSHA256を計算する。</description></item><item><title>dubで自力でCのsqrt()を呼び出す</title><link>https://blog.kotet.jp/2017/04/use-c-math-in-d/</link><pubDate>Sat, 29 Apr 2017 00:00:00 +0000</pubDate><guid>https://blog.kotet.jp/2017/04/use-c-math-in-d/</guid><description>前回の続き。 今度はヘッダファイルを読むのにプリプロセスの必要なものを使いたい、 ということでcore.stdc.mathを使わずにD言語のアプ</description></item><item><title>dubで自力でCの標準ライブラリを呼び出す</title><link>https://blog.kotet.jp/2017/04/use-c-stdio-in-d/</link><pubDate>Fri, 28 Apr 2017 00:00:00 +0000</pubDate><guid>https://blog.kotet.jp/2017/04/use-c-stdio-in-d/</guid><description>D言語はC言語のコードを使えるとは聞いたことはあったが、実際にそれをやったことはなくていまいち理解していなかったのでいろいろ試してみる。 調べ</description></item><item><title>Dのメタプログラミングは面白くない - C++との比較【翻訳】</title><link>https://blog.kotet.jp/2017/04/less-fun/</link><pubDate>Wed, 26 Apr 2017 00:00:00 +0000</pubDate><guid>https://blog.kotet.jp/2017/04/less-fun/</guid><description>この記事は、 Metaprogramming is less fun in D を自分用に翻訳したものを 許可を得て 公開するものである。 コードのコメントも翻訳してある。 ソースに原文を併記してあるので</description></item></channel></rss>