<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2019 on Kotet's Personal Blog</title><link>https://blog.kotet.jp/2019/</link><description>Recent content in 2019 on Kotet's Personal Blog</description><generator>Hugo -- gohugo.io</generator><language>ja</language><atom:link href="https://blog.kotet.jp/2019/index.xml" rel="self" type="application/rss+xml"/><item><title>D言語くんの分子遺伝学的なふわふわ考察</title><link>https://blog.kotet.jp/2019/12/molecular-genetics-for-dman/</link><pubDate>Wed, 25 Dec 2019 00:00:00 +0900</pubDate><guid>https://blog.kotet.jp/2019/12/molecular-genetics-for-dman/</guid><description>分野横断的D言語くん研究の必要性に関する認識の高まり 12月24日、日本D言語くん学会尾張支部は専門分野横断的なD言語くん研究に関するディスカ</description></item><item><title>std.container for 競プロer</title><link>https://blog.kotet.jp/2019/12/std-container-for-competitive-programming/</link><pubDate>Thu, 12 Dec 2019 00:00:00 +0900</pubDate><guid>https://blog.kotet.jp/2019/12/std-container-for-competitive-programming/</guid><description>この記事は D言語 Advent Calendar 2019 12日目の記事です。 大学でD言語はいいぞと言い続けていたら感染開眼したD言語erとの共著です。 この記事は前後編に分かれ</description></item><item><title>クリスマスの喧騒に紛れるD言語くん</title><link>https://blog.kotet.jp/2019/12/doubly-linked-dman/</link><pubDate>Thu, 12 Dec 2019 00:00:00 +0900</pubDate><guid>https://blog.kotet.jp/2019/12/doubly-linked-dman/</guid><description>D言語くんには「伝説」と呼んでいいような驚きの物語がたくさん眠っています。 それは未来へと語り継いでいきたいナチュラルヒストリー。 D言語くんは</description></item><item><title>Twitterデータの全ツイート履歴を見られるように簡易ビューアを作った</title><link>https://blog.kotet.jp/2019/10/tweet-js-viewer/</link><pubDate>Sat, 12 Oct 2019 00:00:00 +0900</pubDate><guid>https://blog.kotet.jp/2019/10/tweet-js-viewer/</guid><description>追記: おそらくTwitter側の仕様変更により、現在自分の作ったビューアは正常に動作しません。 他のビューア作者が対応しているかもしれないので</description></item><item><title>PHPからDに切り替えたらコストが削減できました【翻訳】</title><link>https://blog.kotet.jp/2019/10/saving-money-by-switching-from-php-to-d/</link><pubDate>Tue, 01 Oct 2019 00:00:00 +0900</pubDate><guid>https://blog.kotet.jp/2019/10/saving-money-by-switching-from-php-to-d/</guid><description>Saving Money by Switching from PHP to D – The D Blog を 許可を得て 翻訳しました。 誤訳等あれば気軽に Pull requestを投げてください。 2nightは イタリアのナイトライフと</description></item><item><title>環境変数が設定されると再コンパイルするmakefile</title><link>https://blog.kotet.jp/2019/09/makefile-depends-on-environment-variables/</link><pubDate>Tue, 24 Sep 2019 00:00:00 +0900</pubDate><guid>https://blog.kotet.jp/2019/09/makefile-depends-on-environment-variables/</guid><description>最近は主にRoboDragonsにフォーマッタを導入したりコンパイル時チェックを増やしたりしています。 RoboDragons は何年も日本1位を維持しているのに他</description></item><item><title>clangのデバッグ情報に行番号をのせる</title><link>https://blog.kotet.jp/2019/08/llvm-symbolizer/</link><pubDate>Thu, 22 Aug 2019 00:00:00 +0900</pubDate><guid>https://blog.kotet.jp/2019/08/llvm-symbolizer/</guid><description>clangでAddressSanitizerとか使うと-gオプションなどをつけても行番号や関数名などの情報が出てこなくて困っていた。 ================================================================= ==32466==ERROR: LeakSanitizer: detected</description></item><item><title>所有権と借用をD言語に組み込む【翻訳】</title><link>https://blog.kotet.jp/2019/07/ownership-and-borrowing-in-d/</link><pubDate>Tue, 16 Jul 2019 00:00:00 +0900</pubDate><guid>https://blog.kotet.jp/2019/07/ownership-and-borrowing-in-d/</guid><description>Ownership and Borrowing in D – The D Blog を 許可を得て 翻訳しました。 誤訳等あれば気軽に Pull requestを投げてください。 ほとんどのプログラムはメモリを確保し、管理し</description></item><item><title>"Mimalloc: Free List Sharding in Action"を読んだ</title><link>https://blog.kotet.jp/2019/06/mimalloc/</link><pubDate>Wed, 26 Jun 2019 00:00:00 +0900</pubDate><guid>https://blog.kotet.jp/2019/06/mimalloc/</guid><description>6月20日、mimallocというメモリアロケータが公開されました。 mimallocは関数型言語の処理系のような、小さな確保と解放を繰り返す</description></item><item><title>無限レンジを作るときはemptyの実装に気をつけなければならない</title><link>https://blog.kotet.jp/2019/05/infiniterange-empty/</link><pubDate>Mon, 27 May 2019 00:00:00 +0900</pubDate><guid>https://blog.kotet.jp/2019/05/infiniterange-empty/</guid><description>D言語で無限レンジを作るときに注意しなければならないこと。 ドキュメントをちゃんと読み込んでなかったので長らく気づきませんでした。 無限レンジ 無</description></item><item><title>gccにおけるモジュラ逆数を用いた(x % m == 0)の最適化</title><link>https://blog.kotet.jp/2019/05/gcc-optimization/</link><pubDate>Mon, 06 May 2019 00:00:00 +0900</pubDate><guid>https://blog.kotet.jp/2019/05/gcc-optimization/</guid><description>gccの最適化 GCC is now transforming: ((x % CONSTANT) == 0) to mod inverse and using rotate when it&amp;#39;s even. Not in clang yet thoughhttps://t.co/nfywTIrTe0 &amp;mdash; Marc B. Reynolds (@marc_b_reynolds) May 5, 2019 ある数が定数で割り切れるかを%を使って判定するコードが #include &amp;#34;stdint.h&amp;#34; uint32_t is_div_7(uint32_t k)</description></item><item><title>入門MOVプログラミング 本当にx86のMOVはチューリング完全なのか</title><link>https://blog.kotet.jp/2019/04/mov-programming/</link><pubDate>Thu, 18 Apr 2019 00:00:00 +0900</pubDate><guid>https://blog.kotet.jp/2019/04/mov-programming/</guid><description>TL;DR チューリング完全じゃないかもしれない 作ったもの：kotet/mov-programming: MOV is Turing-Complete はじめに かなり前にx86のmov命令はチ</description></item><item><title>無限の猿とイタチのプログラム</title><link>https://blog.kotet.jp/2019/03/weasel-program/</link><pubDate>Fri, 22 Mar 2019 00:00:00 +0900</pubDate><guid>https://blog.kotet.jp/2019/03/weasel-program/</guid><description>マシュー・サイドの「失敗の科学（原題：Black Box Thinking）」 を読んでいたらリチャード・ドーキンスの「盲目の時計職人」を参照したこの</description></item><item><title>常用漢字表を総当りして新元号をリークする</title><link>https://blog.kotet.jp/2019/02/era-leaker/</link><pubDate>Wed, 27 Feb 2019 00:00:00 +0900</pubDate><guid>https://blog.kotet.jp/2019/02/era-leaker/</guid><description>新元号botに新元号をブルートフォースさせ、かつ任意の漢字2文字を除外しておくことで、任意の新元号を設定できてしまう脆弱性が政府にはあると公</description></item><item><title>ライブラリ不使用、数百行でレイマーチングを行い爆発した</title><link>https://blog.kotet.jp/2019/02/tinykaboom-d/</link><pubDate>Fri, 15 Feb 2019 00:00:00 +0900</pubDate><guid>https://blog.kotet.jp/2019/02/tinykaboom-d/</guid><description>レイマーチングという3Dレンダリング手法があります。 Wikipediaの記事もないくらい知名度の低い手法ですが、 簡単に説明すると描画したいオ</description></item><item><title>ライブラリ不使用、数百行でレイトレーサを書いて新世界の神になる</title><link>https://blog.kotet.jp/2019/02/tinyraytracer-d/</link><pubDate>Fri, 08 Feb 2019 00:00:00 +0900</pubDate><guid>https://blog.kotet.jp/2019/02/tinyraytracer-d/</guid><description>レイトレーシングという3Dレンダリング手法があります。 レイ トレーシング（ray tracing, 光線追跡法）は、光線などを追跡することで、ある点において観測</description></item><item><title>Brainfuckを出力する自作言語を作ってAtCoderに参加する</title><link>https://blog.kotet.jp/2019/01/dsl-for-brainfuck/</link><pubDate>Wed, 16 Jan 2019 00:00:00 +0900</pubDate><guid>https://blog.kotet.jp/2019/01/dsl-for-brainfuck/</guid><description>Brainfuckはしばしば難解言語と呼ばれます。 Brainfuckをまともに書こうと思う人は少なく、 多くの場合既存のプログラムをコピペして</description></item></channel></rss>